@using Abp.Collections.Extensions
@using Zero.Web.Areas.App.Startup
@using Zero.Web.Areas.App.Views.Shared.Components.AppMenu
@using Zero.Web.Navigation
@model UserMenuItemViewModel
@{
    Layout = null;
    var theme = await GetTheme();
    var orderedChildMenuItems = Model.MenuItem.Items.OrderByCustom().ToList();
}
@if (AbpSession.TenantId == null && Model.MenuItem.Name is AppPageNames.Tenant.SubscriptionManagement or AppPageNames.Tenant.Settings)
{
}
else
{
    if (Model.MenuItem.Items.IsNullOrEmpty())
    {
        if (!Model.IsMegaMenuChild)
        {
            <li class="menu-item menu-item-submenu menu-item-rel @GetActiveLinkClass(Model)" aria-haspopup="true">
                <a href="@Model.MenuItem.CalculateUrl(ApplicationPath)" class="menu-link">
                    @if (!Model.RootLevel)
                    {
                        <i class="menu-bullet menu-bullet-dot">
                            <span></span>
                        </i>
                    }
                    <span class="menu-text">@Model.MenuItem.DisplayName</span>
                </a>
            </li>
        }
        else
        {
            <li class="menu-item @GetActiveLinkClass(Model)" aria-haspopup="true">
                <a href="@Model.MenuItem.CalculateUrl(ApplicationPath)" class="menu-link">
                    @if (!Model.RootLevel)
                    {
                        <i class="menu-bullet menu-bullet-dot">
                            <span></span>
                        </i>
                    }
                    <span class="menu-text">@Model.MenuItem.DisplayName</span>
                </a>
            </li>
        }
        
    }
    else
    {
        if (!IsMegaMenu(Model))
        {
            <li class="menu-item menu-item-submenu menu-item-open-dropdown @GetMenuItemClass(Model) @GetActiveMenuClass(Model)" data-menu-toggle="hover" aria-haspopup="true">
                <a href="javascript:;" class="menu-link menu-toggle">
                    <span class="menu-text">@Model.MenuItem.DisplayName</span>
                    <i class="menu-arrow"></i>
                </a>
                <div class="menu-submenu @GetSubMenuClass(Model)">
                    <ul class="menu-subnav">
                        @for (var i = 0; i < Model.MenuItem.Items.Count; i++)
                        {
                            var childMenuItem = orderedChildMenuItems[i];
                            if (!childMenuItem.IsVisible)
                            {
                                continue;
                            }
                            @await Html.PartialAsync("Components/AppMenu/_TopUserMenuItem", new UserMenuItemViewModel
                            {
                                MenuItem = childMenuItem,
                                MenuItemIndex = i,
                                CurrentPageName = Model.CurrentPageName,
                                RootLevel = false
                            })
                        }
                    </ul>
                </div>
            </li>
        }
        else
        {
            if (GetMegaMenuLevel(Model) == 0)
            {
                <li class="menu-item menu-item-submenu @GetActiveMegaMenuClass(Model)" data-menu-toggle="hover" aria-haspopup="true">
                    <a href="javascript:;" class="menu-link menu-toggle">
                        <span class="menu-text">@Model.MenuItem.DisplayName</span>
                        <i class="menu-arrow"></i>
                    </a>
                    <div class="menu-submenu menu-submenu-fixed menu-submenu-center">
                        <div class="menu-subnav">
                            <ul class="menu-content">
                                @for (var i = 0; i < Model.MenuItem.Items.Count; i++)
                                {
                                    var childMenuItem = orderedChildMenuItems[i];
                                    if (!childMenuItem.IsVisible)
                                    {
                                        continue;
                                    }
                                    @await Html.PartialAsync("Components/AppMenu/_TopUserMenuItem", new UserMenuItemViewModel
                                    {
                                        MenuItem = childMenuItem,
                                        MenuItemIndex = i,
                                        CurrentPageName = Model.CurrentPageName,
                                        RootLevel = false,
                                        IsMegaMenuChild = true
                                    })
                                }
                            </ul>
                        </div>
                    </div>
                </li>
            }
            else
            {
                <li class="menu-item @GetActiveMegaMenuClass(Model)" aria-haspopup="true">
                    <h3 class="menu-heading menu-toggle">
                        <span class="menu-text">@Model.MenuItem.DisplayName</span>
                        <i class="menu-arrow"></i>
                    </h3>
                    <ul class="menu-inner">
                        @for (var i = 0; i < Model.MenuItem.Items.Count; i++)
                        {
                            var childMenuItem = orderedChildMenuItems[i];
                            if (!childMenuItem.IsVisible)
                            {
                                continue;
                            }
                            @await Html.PartialAsync("Components/AppMenu/_TopUserMenuItem", new UserMenuItemViewModel
                            {
                                MenuItem = childMenuItem,
                                MenuItemIndex = i,
                                CurrentPageName = Model.CurrentPageName,
                                RootLevel = false,
                                IsMegaMenuChild = true
                            })
                        }
                    </ul>
                </li>
            }
        }
    }
}

@functions
{
    private static string GetActiveLinkClass(UserMenuItemViewModel model)
    {
        var activeClass = " ";
        if (!model.MenuItem.IsMenuActive(model.CurrentPageName))
        {
            return activeClass;
        }

        activeClass += "menu-item-active ";

        return activeClass;
    }

    private static string GetActiveMenuClass(UserMenuItemViewModel model)
    {
        if (!model.MenuItem.IsMenuActive(model.CurrentPageName))
        {
            return "";
        }

        return "menu-item-here menu-item-active ";
    }

    private static string GetMenuItemClass(UserMenuItemViewModel model)
    {
        var menuItemClass = " ";
        if (model.RootLevel)
        {
            menuItemClass += "menu-item-rel ";
        }

        return menuItemClass;
    }

    private static string GetSubMenuClass(UserMenuItemViewModel model)
    {
        var menuItemClass = " menu-submenu-classic  ";
        if (model.RootLevel)
        {
            menuItemClass += "menu-submenu-left ";
        }
        else
        {
            menuItemClass += "menu-submenu-right ";
        }

        return menuItemClass;
    }

    private static string GetActiveMegaMenuClass(UserMenuItemViewModel model)
    {
        return !model.MenuItem.IsMenuActive(model.CurrentPageName) ? "" : "menu-item-open menu-item-here menu-item-active ";
    }
    
    private static bool IsMegaMenu(UserMenuItemViewModel model)
    {
        return model.MenuItem.CustomData is Dictionary<string, string>dictionary &&
               dictionary.ContainsKey("useMegaMenu") &&
               dictionary["useMegaMenu"] == "true";
    }

    private static int GetMegaMenuLevel(UserMenuItemViewModel model)
    {
        if (model.MenuItem.CustomData is Dictionary<string, string>dictionary &&
            dictionary.ContainsKey("useMegaMenu") &&
            dictionary["useMegaMenu"] == "true" &&
            dictionary.ContainsKey("megaMenuLevel"))
            return int.Parse(dictionary["megaMenuLevel"]);
        return 0;
    }
}